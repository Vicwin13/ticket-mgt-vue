{
  "version": 3,
  "sources": ["../../../../Desktop/Vic Works/ticket-mgt-vue/ticket-mgt/netlify/functions/api.js"],
  "sourceRoot": "C:/Users/HP/AppData/Local/Temp/tmp-21612-SJjt4R68GVv5",
  "sourcesContent": ["// netlify/functions/api.js - COMPLETE VERSION WITH TICKETS\r\nlet users = [];\r\nlet tickets = [];\r\nlet userIdCounter = 1;\r\nlet ticketIdCounter = 1;\r\n\r\nfunction generateToken(user) {\r\n  return `mocked-jwt-${user.id}-${Date.now()}`;\r\n}\r\n\r\n// Helper function to authenticate user from token\r\nfunction authenticateUser(authHeader) {\r\n  if (!authHeader) return null;\r\n  \r\n  const token = authHeader.replace('Bearer ', '');\r\n  return users.find(user => user.token === token);\r\n}\r\n\r\nexports.handler = async (event, context) => {\r\n  console.log('API CALLED:', event.httpMethod, event.path);\r\n  \r\n  // Handle CORS\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Access-Control-Allow-Origin': '*',\r\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS'\r\n  };\r\n\r\n  // Handle preflight\r\n  if (event.httpMethod === 'OPTIONS') {\r\n    return { statusCode: 200, headers, body: '' };\r\n  }\r\n\r\n  const path = event.path.replace('/.netlify/functions/api', '');\r\n  \r\n  try {\r\n    // USER REGISTRATION\r\n    if (event.httpMethod === 'POST' && path === '/users/register') {\r\n      const body = JSON.parse(event.body);\r\n      const { firstName, lastName, email, password } = body;\r\n      \r\n      console.log('Registration attempt:', { email, firstName, lastName });\r\n      \r\n      // Validation\r\n      if (!firstName || !lastName || !email || !password) {\r\n        return {\r\n          statusCode: 400,\r\n          headers,\r\n          body: JSON.stringify({ error: 'All fields are required' })\r\n        };\r\n      }\r\n\r\n      // Check if user exists\r\n      if (users.find(u => u.email === email)) {\r\n        return {\r\n          statusCode: 400,\r\n          headers,\r\n          body: JSON.stringify({ error: 'User already exists' })\r\n        };\r\n      }\r\n\r\n      // Create user\r\n      const newUser = {\r\n        id: userIdCounter.toString(),\r\n        firstName,\r\n        lastName,\r\n        email,\r\n        password,\r\n        token: generateToken({ id: userIdCounter.toString() })\r\n      };\r\n\r\n      users.push(newUser);\r\n      userIdCounter++;\r\n\r\n      // Return without password\r\n      const { password: _, ...userResponse } = newUser;\r\n      \r\n      console.log('User registered successfully:', userResponse.email);\r\n      \r\n      return {\r\n        statusCode: 200,\r\n        headers,\r\n        body: JSON.stringify({\r\n          user: userResponse,\r\n          token: newUser.token\r\n        })\r\n      };\r\n    }\r\n\r\n    // USER LOGIN\r\n    if (event.httpMethod === 'POST' && path === '/users') {\r\n      const body = JSON.parse(event.body);\r\n      const { email, password } = body;\r\n      \r\n      const user = users.find(u => u.email === email && u.password === password);\r\n      \r\n      if (!user) {\r\n        return {\r\n          statusCode: 401,\r\n          headers,\r\n          body: JSON.stringify({ error: 'Invalid credentials' })\r\n        };\r\n      }\r\n\r\n      const { password: _, ...userResponse } = user;\r\n      \r\n      return {\r\n        statusCode: 200,\r\n        headers,\r\n        body: JSON.stringify({\r\n          user: userResponse,\r\n          token: user.token\r\n        })\r\n      };\r\n    }\r\n\r\n    // GET ALL TICKETS (no auth required for demo)\r\n    if (event.httpMethod === 'GET' && path === '/tickets') {\r\n      console.log('Fetching all tickets, count:', tickets.length);\r\n      \r\n      return {\r\n        statusCode: 200,\r\n        headers,\r\n        body: JSON.stringify(tickets)\r\n      };\r\n    }\r\n\r\n    // GET SINGLE TICKET\r\n    if (event.httpMethod === 'GET' && path.startsWith('/tickets/')) {\r\n      const ticketId = path.split('/')[2];\r\n      console.log('Fetching ticket:', ticketId);\r\n      \r\n      const ticket = tickets.find(t => t.id === ticketId);\r\n      \r\n      if (!ticket) {\r\n        return {\r\n          statusCode: 404,\r\n          headers,\r\n          body: JSON.stringify({ error: 'Ticket not found' })\r\n        };\r\n      }\r\n\r\n      return {\r\n        statusCode: 200,\r\n        headers,\r\n        body: JSON.stringify(ticket)\r\n      };\r\n    }\r\n\r\n    // CREATE TICKET (with auth)\r\n    if (event.httpMethod === 'POST' && path === '/tickets') {\r\n      // Check authentication\r\n      const user = authenticateUser(event.headers.authorization);\r\n      if (!user) {\r\n        return {\r\n          statusCode: 401,\r\n          headers,\r\n          body: JSON.stringify({ error: 'Authentication required' })\r\n        };\r\n      }\r\n\r\n      const body = JSON.parse(event.body);\r\n      const { title, description, status, priority } = body;\r\n      \r\n      console.log('Creating ticket:', { title, description, status, priority });\r\n      \r\n      // Validation\r\n      if (!title || !description) {\r\n        return {\r\n          statusCode: 400,\r\n          headers,\r\n          body: JSON.stringify({ error: 'Title and description are required' })\r\n        };\r\n      }\r\n\r\n      // Create ticket\r\n      const newTicket = {\r\n        id: ticketIdCounter.toString(),\r\n        title: title.trim(),\r\n        description: description.trim(),\r\n        status: status || 'open',\r\n        priority: priority || 'medium',\r\n        createdBy: user.id,\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n\r\n      tickets.push(newTicket);\r\n      ticketIdCounter++;\r\n      \r\n      console.log('Ticket created successfully:', newTicket.id);\r\n      \r\n      return {\r\n        statusCode: 201,\r\n        headers,\r\n        body: JSON.stringify(newTicket)\r\n      };\r\n    }\r\n\r\n    // UPDATE TICKET (with auth)\r\n    if (event.httpMethod === 'PUT' && path.startsWith('/tickets/')) {\r\n      // Check authentication\r\n      const user = authenticateUser(event.headers.authorization);\r\n      if (!user) {\r\n        return {\r\n          statusCode: 401,\r\n          headers,\r\n          body: JSON.stringify({ error: 'Authentication required' })\r\n        };\r\n      }\r\n\r\n      const ticketId = path.split('/')[2];\r\n      const body = JSON.parse(event.body);\r\n      const { title, description, status, priority } = body;\r\n      \r\n      console.log('Updating ticket:', ticketId, { title, description, status, priority });\r\n      \r\n      const ticketIndex = tickets.findIndex(t => t.id === ticketId);\r\n      \r\n      if (ticketIndex === -1) {\r\n        return {\r\n          statusCode: 404,\r\n          headers,\r\n          body: JSON.stringify({ error: 'Ticket not found' })\r\n        };\r\n      }\r\n\r\n      // Update ticket\r\n      if (title !== undefined) tickets[ticketIndex].title = title.trim();\r\n      if (description !== undefined) tickets[ticketIndex].description = description.trim();\r\n      if (status !== undefined) tickets[ticketIndex].status = status;\r\n      if (priority !== undefined) tickets[ticketIndex].priority = priority;\r\n      \r\n      tickets[ticketIndex].updatedAt = new Date().toISOString();\r\n\r\n      console.log('Ticket updated successfully:', ticketId);\r\n      \r\n      return {\r\n        statusCode: 200,\r\n        headers,\r\n        body: JSON.stringify(tickets[ticketIndex])\r\n      };\r\n    }\r\n\r\n    // DELETE TICKET (with auth)\r\n    if (event.httpMethod === 'DELETE' && path.startsWith('/tickets/')) {\r\n      // Check authentication\r\n      const user = authenticateUser(event.headers.authorization);\r\n      if (!user) {\r\n        return {\r\n          statusCode: 401,\r\n          headers,\r\n          body: JSON.stringify({ error: 'Authentication required' })\r\n        };\r\n      }\r\n\r\n      const ticketId = path.split('/')[2];\r\n      console.log('Deleting ticket:', ticketId);\r\n      \r\n      const ticketIndex = tickets.findIndex(t => t.id === ticketId);\r\n      \r\n      if (ticketIndex === -1) {\r\n        return {\r\n          statusCode: 404,\r\n          headers,\r\n          body: JSON.stringify({ error: 'Ticket not found' })\r\n        };\r\n      }\r\n\r\n      const deletedTicket = tickets.splice(ticketIndex, 1)[0];\r\n      \r\n      console.log('Ticket deleted successfully:', ticketId);\r\n      \r\n      return {\r\n        statusCode: 200,\r\n        headers,\r\n        body: JSON.stringify(deletedTicket)\r\n      };\r\n    }\r\n\r\n    // If no route matches\r\n    return {\r\n      statusCode: 404,\r\n      headers,\r\n      body: JSON.stringify({ error: 'Route not found: ' + path })\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error('API Error:', error);\r\n    return {\r\n      statusCode: 500,\r\n      headers,\r\n      body: JSON.stringify({ error: 'Internal server error: ' + error.message })\r\n    };\r\n  }\r\n};"],
  "mappings": "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",
  "names": []
}
